import plotly.express as px
import pandas as pd
import numpy as np
from dash import Dash, html, dcc, Input, Output, dash_table, State
import dash_bootstrap_components as dbc

#df_data = pd.read_csv("geo_data_sec.csv")
df_data = pd.read_csv("https://github.com/datenlabor01/geodaten/blob/main/geo_data_found.csv?raw=true")
app = Dash(external_stylesheets = [dbc.themes.LUX])

#Set-up dynamic elements:
#Dropdown for Year, Value and Donor Agency: 
year_dropdown = dcc.Dropdown(options=sorted(df_data["Year"].unique()),
                             value='All', style={"textAlign": "center"}, clearable=False, multi=True, placeholder='Alle Jahre')

value_slider = dcc.Slider(min = 0, max = 10, step=None, value = 0, 
                        marks={0: 'All Projects', 
                               2: "> 2 Mio. USD",
                               5: "> 5 Mio. USD",
                               10: "> 10 Mio. USD"})

donor_dropdown = dcc.Dropdown(options=sorted(df_data["Ressort"].unique()), value ="All", 
                                              style={"textAlign": "center"}, clearable=False, multi=True, placeholder='Alle Melder')

#Prepare for map-visualization by removing empty elements and converting coordinates to integers:
df_data.loc[df_data["Location"] == "Kurdistan", "Lat"] = np.nan
df_data.loc[df_data["Location"] == "Kurdish region", "Lat"] = np.nan
df_data.loc[df_data["Location"] == "Africa", "Lat"] = np.nan
df_data = df_data[(df_data["Lat"].isna() == False) & (df_data["Lat"] != "not found")]
df_data["Lat"] = df_data.Lat.astype(float)
df_data["Lon"] = df_data.Lon.astype(float)

text2 = "Diese Anwendung wird als Prototyp vom BMZ Datenlabor angeboten. Sie kann Fehler enthalten und ist als alleinige Entscheidungsgrundlage nicht geeignet. Außerdem können Prototypen ausfallen oder kurzfristig von uns verändert werden. Sichern Sie daher wichtige Ergebnisse per Screenshot oder Export. Die Anwendung ist vorerst intern und sollte daher nicht ohne Freigabe geteilt werden. Wenden Sie sich bei Fragen gerne an datenlabor@bmz.bund.de"

app.layout = dbc.Container([
      dbc.Row([
         html.H1(children='Geodaten Visualisierung', style={'textAlign': 'center'}),
         html.P(children = "Das ist ein Prototyp, der Fehler enthalten kann. Die Karte stellt Orte dar, die in der Projektbeschreibung in den ODA/IATI-Daten erwähnt werden und nach Auszahlungsbetrag angezeigt werden.",
         style={'textAlign': 'center'}),
      ]),
      #App button:
      dbc.Row([
         dbc.Button(children = "Über diese App", id = "textbutton", color = "light", className = "me-1",
                    n_clicks=0, style={'textAlign': 'center', "width": "30rem"})
      ], justify = "center"),
      dbc.Row([
            dbc.Collapse(dbc.Card(dbc.CardBody([
               dbc.Badge(text2, className="text-wrap"),
               ])), id="collapse", style={'textAlign': 'center', "width": "60rem"}, is_open=False),
      ], justify = "center"),
      #Dynamic elements:
      dbc.Row([
        dbc.Col([year_dropdown, html.Br(), donor_dropdown, html.Br(), 
                 value_slider, html.Br(),
         ], width = 8),
      ],justify = "center"),

      dbc.Row([
         dbc.Badge(id = "text", className="text-wrap"),
         dcc.Graph(id='map', style={'textAlign': 'center'}),
      ]),
      #Data Table:
      dbc.Row([
         my_table := dash_table.DataTable(
         df_data.to_dict('records'), [{"name": i, "id": i} for i in df_data.columns[4:]],
         filter_action="native", sort_action="native", page_size= 25,
         style_cell={'textAlign': 'left', "whiteSpace": "normal", "height": "auto"},
         style_header={'backgroundColor': 'rgb(11, 148, 153)', 'color': 'black', 'fontWeight': 'bold'},
             style_data_conditional=[{
            'if': {'row_index': 'odd'},
            'backgroundColor': 'rgb(235, 240, 240)',
        }], export_format= "xlsx"),
         ]),
])

#Button to display text:
@app.callback(
    Output("collapse", "is_open"),
    [Input("textbutton", "n_clicks")],
    [State("collapse", "is_open")],
)

def collapse(n, is_open):
   if n:
      return not is_open
   return is_open

@app.callback(
    [Output('map', 'figure'), Output(my_table, "data"), Output("text", "children")],
    [Input(year_dropdown, 'value'), Input(donor_dropdown, 'value'), Input(value_slider, 'value')]
)

def update_map(selected_year, donor_dropdown, value_slider):

   if (selected_year == "All") | (selected_year == []):
      dat_fil = df_data
   else:
      dat_fil = df_data[df_data["Year"].isin(selected_year)]
   if (donor_dropdown == "All") | (donor_dropdown == []):
      dat_fil = dat_fil
   else:
      dat_fil = dat_fil[dat_fil["Ressort"].isin(donor_dropdown)]
   if value_slider == 0:
      dat_fil = dat_fil
   else:
      dat_fil = dat_fil[dat_fil["Value"] > value_slider]
   
   if dat_fil.empty == False:
      df_map = dat_fil.groupby(["Location", "Lat", "Lon", "Country", "duplicate_project"])["Value"].sum().reset_index()
      figMap = px.scatter_mapbox(df_map, lat="Lat", lon="Lon", 
                        hover_name="Location", hover_data=["Location", "Country", "duplicate_project"],
                        color="Value", color_continuous_scale="Viridis",
                        range_color=(min(df_map["Value"]), max(df_map["Value"]*0.05)),
                        zoom = 2)
      text = "" 
   else:
      #Display empty empty when dataframe is empty due to user selection:
      dat = pd.DataFrame(index=[0])
      dat["Lat"] = 0
      dat["Lon"] = 0
      dat["Value"] = 0
      figMap = px.scatter_mapbox(dat, "Lat", "Lon", size = "Value", zoom = 2)
      text = "No data points for selected options."

   figMap.update_layout(mapbox_style="carto-positron")
   figMap.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
   
   return figMap, dat_fil.to_dict("records"), text

if __name__ == '__main__':
    app.run_server(debug=True)
